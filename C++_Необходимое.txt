<<<<<<< HEAD
***********************************************************
using cin::std;
using cout::std;	Не используем пространство имен;
using endl::std;	Дальше в коде просто пишем cout, cin и тд..
***********************************************************
while (!(cin>>A[i]))
	cin.clear();
   while (cin.get != '\n'){};
//************************* строки ************************* .//
cin.getline(variable, size) //Вводим символы подряд до size;
strcpy(str2,str1) // Копируем строку 1 в строку 2;
strcmp(str1,str2) // Сравнение строк; Если строки равны, то 0, если не равны другие значения.
strcat(str2,str1) // Добавление первой строки во вторую;
#include<cctype> // в ней есть функция isalpha(); проверки символ или цифра;
sizeof(variable) // размер переменной в байтах;
*************************** Куказатели ******************* //
double* p; // занимает 4 байта;
void* p; //указывает на любой тип указателя;
int N;
cin >> N;
new int[N]; // выделяем адресс в  
int *p = new int[N]; // Выделили память;
delete [] p; // освобождение памяти;
int** p=new int[N]
for (int i=0;i<N; i++)
{
    p[i] = new int[M];		
}
//FREE
for(int i=0; i<N; i++)
delete [] p[i]; // освобождение памяти;
delete [] p;
*************************************************
Рисование фигур
Прямоугольный треугольник.
// считаем элементы в столбцах; 
	for (int i = 0; i <= height; i++) {
		cout << endl;
		// строки;
		for (int j = 0; j <= i; j++)
			cout << "*";
	}
------------------------------------------------------------
Полый прямоугольный треугольник
for (int i = 0; i <= height; i++)
	{
		for (int j = 0; j <= i; j++)
		{
			if (i != height)

			{
				if (j == 0 || j == i)

					cout << "* ";
				else

					cout << "  ";
			}

			else if (i == height)
				cout << "* ";
		}
		for (int spaces = i; spaces<height; spaces++)

			cout << "  ";

		cout << endl;
	}
-----------------------------------------------------------------------------
Перевернутый прямоугольный треугольник
cin >> range;

	for (i = 0; i <= range; i++) {
		for (j = 0; j < range - i; j++, k++) {
			cout << "*" << " ";
		}
		cout << "\n";
	}
*************************************
Знаки после запятой;
cout.setf(ios::fixed);
cout.setf(ios::showpoint);	
cout.precision(3);
*************************************
Объявление своей собственной переменной
//объявил свой тип данных
typedef unsigned short us;
теперь можно использовать вместо unsignet short просто us;
*************************************
//установка цвета консоли.
HANDLE hConsoleHandle = GetStdHandle(STD_OUTPUT_HANDLE);
SetConsoleTextAttribute(hConsoleHandle, FOREGROUND_GREEN);
*************************************
//проверяем на ввод числа, не буквы
if (!cin)
{
	cout << "Ошибка ввода!" << endl;
	cin.clear();
	fflush(stdin);
}
*************************************
Если gets() или cin.getline (var, size) вложены в switch
необходимо очистить поток перед вводом.
//эта фигня очищает поток, иначе у нас при первом getline всегда читается \n.
cin.ignore(numeric_limits<streamsize>::max(), '\n');
cout << "Введите строку, после чего введите Enter ->" << endl;
//Ввод, чтобы читались и пробелы
cin.getline(str, 255);
*************************************
do // начало цикла do while
{
/*блок операторов*/;
}
while (/*условие выполнения цикла*/); // конец цикла do while
*************************************
switch ( <переменная> ) {
case значение1:
  Выполнить если <переменная> == значение1
  break;
case значение2:
  Выполнить если <переменная> == значение2
  break;
...
default:
  выполнить, если ни один вариант не подошел
  break;
}
*************************************
Тернарный оператор
1.  (a > b) ? a - b : a / b; - /Двоеточие это ELSE!!!;

2. variable == 1 ? cout << "Выберите операцию!\n..........\n\n" : cout << "До свидания! Не забудьте взять чек!\n\n";

*************************************
Циклы вложенные, первый цикл перебирает строки, а второй цикл элементы строки (столбцы).
*************************************
Реверс одномерного массива
for (us i = 0, j=10-1; i < j; i++, j--)
	{
		    buffer = arr[i];
			arr[i] = arr[j];
			arr[j] = buffer;
	}
	for (us i = 0; i < SIZE; i++)
		cout << arr[i] << " ";
*************************************
Метод заполнения массива
#include <algorithm>
#include <cstdlib>
void fill()
{
    std::generate(mas, mas + size, []()->int
    {
    return rand() % 100;    
    });
}
Заполнение массива случайными числами от 0 до 20;
#include <time.h>
srand(time(NULL));	
arr[i] = (rand() % 20); 
************************************
rand() % 41 + (-20); от -20 до -20;
rand() % (100 - 10 + 1) + 10;
************************************
#include <iomanip>
cout << setw(5) - количество отступов;
*************************************
Инициализация массива
int array[10] = {10,3,4,7,1,2,6,11,9,100};
Заполнение массива:
int array[size] 
for (int i(0); i<size; i++)
	cout << array[i] << endl
Заполнение двумерного массива:
for (i = 0; i <= 4; i++) {
	for (j = 0; j <= 4; j++) {
		a[i][j] *= b[i];
cout << a[i][j] << "\t";
}
cout << endl;
}
*************************************
Функции:
  int sum_value(int); //Функция будет принимать обычный параметр
  int sum_ref(int &); //Функция будет принимать ссылку
  int sum_ptr(int *);  //Функция будет принимать указатель
______________________________________________
// Возвращаем пустое значение;
void message()					
{
	cout << "Hello World! \n";
}
void main()
{
	message();
	system("pause");
} 
_______________________________________________
int one()
{
	return 1;
}

void main()
{
	int a;
	a = one();  // можно выводить сразу функцию в cout.
	cout << a << endl << one () << endl;
	system("pause");
} 
________________________________________________
char star()
{
	return '*';
}

void main()
{
	char a;
	a = star();  // можно выводить сразу функцию в cout.
	cout << a << endl << star() << endl;
	system("pause");
} 
__________________________________________________
 int summa(int a, int b)
{
	return a + b; // 4 + 5
}

void main()
{
	int sum, x, y;
	sum = summa(4,5);  // можно выводить сразу функцию в cout. 
	sum = summa(x, y);
	cout << sum << endl;
	system("pause");
} 
___________________________________________________
// Возвращаем пустое значение;
char simbols(void)					
{
	char x=NULL;
	for (int i = 0; i < x; i++){
		i = x;
	}
}
void main()
{
	 char x, simbolic;
		cin >> x;
		simbolic = simbols();
		cout << simbols() << endl;
	system("pause");
}
______________________________________________________
Массив в функции
void enter_array(int a[], int size)
{
	srand(time(NULL));
	a[size] = rand() % 10;
	for (int i = 0; i <= size; i++){
		cout << a[size] << endl;
     }
}

void main()
{
	const int size = 5;
	cout << "Выводим массив размером: \n";
	enter_array(size, );
	system("pause");
} 
________________________________________________________
// прототип функции
void change_arr(int arr[], int size);	
void main ()
{
}
void change_arr(int arr[], int size)
{
}
_________________________________________________________
Встраиваемая функция, должна быть не перегружена if, while, switch
inline int sum(int a, int b)
{
	return a + b;
}
void main ()
{
 summa = sum(x, y);
cout << summa << endl; }
}	
_________________________________________________________
// Используем вместо функции препроцессор;	
#define sum (x+y)	
void main()
{
    int summa
    summa = sum(x, y);
}	
__________________________________________________________
Перегрузка функции, функция с одним именем но разными параметрами, сама определяет в процессе компиляции
нужные параметры;
int add_values(int a,int b)
{
    return(a + b); //два значения;
)
int add_values (int a, int b, int c)
(
   return(a + b + c); // три значения;
)
void main(void)
{
	cout << «200 + 801 = » << add_values(200, 801) << endl;
	cout << «100 + 201 + 700 = » << add_values(100, 201, 700) << endl;
}		
или:
int add_values(int a,int b)
{
    return(a + b); //два значения;
)
float add_values (float  a, float  b, float  c)
(
   return(a + b); // три значения;
)
void main(void)
{
	cout << «10 + 1 = » << add_values(10, 1) << endl;
	cout << «9.1 + 6.8 = » << add_values(9.1, 6.8) << endl;
}
___________________________________________________________
Шаблоны функций
template <typename T>	// ПИСАТЬ РАЗДЕЛЬНО!!!!!!!!!!
T summa(T a, T b)
{
	return a + b; 
}	
void main ()
{ 
   cout << summa(2, 3) << endl;
}
____________________________________________________________
// шаблон функции printArray
#include <cstring>
using namespace std;
template <typename T>
void printArray(const T * array, int count)
{
    for (int ix = 0; ix < count; ix++)
        cout << array[ix] << "   ";
    cout << endl;
} // конец шаблона функции printArray
int main()
{
    // размеры массивов
    const int iSize = 10,
              dSize = 7,
              fSize = 10,
              cSize = 5;
    // массивы разных типов данных
    int    iArray[iSize] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    double dArray[dSize] = {1.2345, 2.234, 3.57, 4.67876, 5.346, 6.1545, 7.7682};
    float  fArray[fSize] = {1.34, 2.37, 3.23, 4.8, 5.879, 6.345, 73.434, 8.82, 9.33, 10.4};
    char   cArray[cSize] = {"MARS"};
    cout << "\t\t Шаблон функции вывода массива на экран\n\n";
    // вызов локальной версии функции printArray для типа int через шаблон
    cout << "\nМассив типа int:\n"; printArray(iArray, iSize);
    // вызов локальной версии функции printArray для типа double через шаблон
    cout << "\nМассив типа double:\n"; printArray(dArray, dSize);
    // вызов локальной версии функции printArray для типа float через шаблон
    cout << "\nМассив типа float:\n"; printArray(fArray, fSize);
    // вызов локальной версии функции printArray для типа char через шаблон
    cout << "\nМассив типа char:\n";printArray(cArray, cSize);
    return 0;
}
________________________________________________________________
Указатели: при объявлении лучше использовать int  *ptrx вместо int *x;
----------------------------------------------------------------------------------
    Когда мы оперируем данными, то используем знак *
    Когда мы оперируем адресами, то используем знак &
----------------------------------------------------------------------------------
// Инициализация указателя
int main()
{
    int *a = new int; // Объявление указателя для переменной типа int
    int *b = new int(5); // Инициализация указателя
    *a = 10;
    *b = *a + *b;
    cout << "b is " << *b << endl;
    delete b;
    delete a;

    return 0;
}
_--------------------------------------------------------------------------------
Удаление памяти 
int main()
{
    // Выделение памяти
    int *a = new int;
    int *b = new int;
    float *c = new float;

    // ... Любые действия программы

    // Освобождение выделенной памяти
    delete c;
    delete b;
    delete a;

    return 0;
}
Выделение памяти массива 
int arr = new int [SIZE];
Удаление:
delete [] arr;
--------------------------------------------------------------------------------------------
Выделение памяти в двумерном динамическом массиве
// динамическое создание двумерного массива вещественных чисел на десять элементов
    float **ptrarray = new float* [2]; // две строки в массиве
    for (int count = 0; count < 2; count++)
        ptrarray[count] = new float [5]; // и пять столбцов
    // заполнение массива
    for (int count_row = 0; count_row < 2; count_row++)
        for (int count_column = 0; count_column < 5; count_column++)
            ptrarray[count_row][count_column] = (rand() % 10 + 1) / float((rand() % 10 + 1)); //заполнение массива случайными числами с масштабированием от 1 до 10
    // вывод массива
    for (int count_row = 0; count_row < 2; count_row++)
    {
        for (int count_column = 0; count_column < 5; count_column++)
            cout << setw(4) <<setprecision(2) << ptrarray[count_row][count_column] << "   ";
        cout << endl;
    }
    // удаление двумерного динамического массива
    for (int count = 0; count < 2; count++)
        delete []ptrarray[count];
    system("pause");
*****************************************************************************************
Перечисления
enum  weddingAnn
 {
	chintz = 1, 
	paper,
	leather,
	linen, 
	wooden
} year;	//определяем перечисление и объявляем переменную
 
int main()
{
    setlocale(LC_ALL, "rus");
 
    cout << "Олег с Ольгой отмечают\t" << chintz << "-ю годовщину со дня свадьбы!!!";
    cout << "\n";
    cout << "Андрей с Анной отмечают\t" << paper << "-ю годовщину со дня свадьбы!!!";
    cout << "\n";
    cout << "Марк с Ириной отмечают\t" << leather << "-ю годовщину со дня свадьбы!!!";
    cout << "\n";
    cout << "Игорь с Юлией отмечают\t" << linen << "-ю годовщину со дня свадьбы!!!";
    cout << "\n";
    cout << "Олег с Аллой отмечают\t" << wooden << "-ю годовщину со дня свадьбы!!!";
    cout << "\n\n";
 
return 0;
=======
*************************************
Знаки после запятой;
cout.setf(ios::fixed);
cout.setf(ios::showpoint);	
cout.precision(3);
*************************************
Объявление своей собственной переменной
//объявил свой тип данных
typedef unsigned short us;
теперь можно использовать вместо unsignet short просто us;
*************************************
//установка цвета консоли.
HANDLE hConsoleHandle = GetStdHandle(STD_OUTPUT_HANDLE);
SetConsoleTextAttribute(hConsoleHandle, FOREGROUND_GREEN);
*************************************
//проверяем на ввод числа, не буквы
if (!cin)
{
	cout << "Ошибка ввода!" << endl;
	cin.clear();
	fflush(stdin);
}
*************************************
Если gets() или cin.getline (var, size) вложены в switch
необходимо очистить поток перед вводом.
//эта фигня очищает поток, иначе у нас при первом getline всегда читается \n.
cin.ignore(numeric_limits<streamsize>::max(), '\n');
cout << "Введите строку, после чего введите Enter ->" << endl;
//Ввод, чтобы читались и пробелы
cin.getline(str, 255);
*************************************
do // начало цикла do while
{
/*блок операторов*/;
}
while (/*условие выполнения цикла*/); // конец цикла do while
*************************************
switch ( <переменная> ) {
case значение1:
  Выполнить если <переменная> == значение1
  break;
case значение2:
  Выполнить если <переменная> == значение2
  break;
...
default:
  выполнить, если ни один вариант не подошел
  break;
}
*************************************
Тернарный оператор
1.  (a > b) ? a - b : a / b; - /Двоеточие это ELSE!!!;

2. variable == 1 ? cout << "Выберите операцию!\n..........\n\n" : cout << "До свидания! Не забудьте взять чек!\n\n";

*************************************
Заполнение массива случайными числами от 0 до 20;
#include <time.h>
srand(time(NULL));	
arr[i] = (rand() % 20); 
************************************
rand() % 41 + (-20); от -20 до -20;
rand() % (100 - 10 + 1) + 10;
************************************
#include <iomanip>
cout << setw(5) - количество отступов;
*************************************
Инициализация массива
int array[10] = {10,3,4,7,1,2,6,11,9,100};
Заполнение массива:
int array[size] 
for (int i(0); i<size; i++)
	cout << array[i] << endl
Заполнение двумерного массива:
for (i = 0; i <= 4; i++) {
	for (j = 0; j <= 4; j++) {
		a[i][j] *= b[i];
cout << a[i][j] << "\t";
}
cout << endl;
}
*************************************
Функции:
  int sum_value(int); //Функция будет принимать обычный параметр
  int sum_ref(int &); //Функция будет принимать ссылку
  int sum_ptr(int *);  //Функция будет принимать указатель
______________________________________________
// Возвращаем пустое значение;
void message()					
{
	cout << "Hello World! \n";
}
void main()
{
	message();
	system("pause");
} 
_______________________________________________
int one()
{
	return 1;
}

void main()
{
	int a;
	a = one();  // можно выводить сразу функцию в cout.
	cout << a << endl << one () << endl;
	system("pause");
} 
________________________________________________
char star()
{
	return '*';
}

void main()
{
	char a;
	a = star();  // можно выводить сразу функцию в cout.
	cout << a << endl << star() << endl;
	system("pause");
} 
__________________________________________________
 int summa(int a, int b)
{
	return a + b; // 4 + 5
}

void main()
{
	int sum, x, y;
	sum = summa(4,5);  // можно выводить сразу функцию в cout. 
	sum = summa(x, y);
	cout << sum << endl;
	system("pause");
} 
___________________________________________________
// Возвращаем пустое значение;
char simbols(void)					
{
	char x=NULL;
	for (int i = 0; i < x; i++){
		i = x;
	}
}
void main()
{
	 char x, simbolic;
		cin >> x;
		simbolic = simbols();
		cout << simbols() << endl;
	system("pause");
}
______________________________________________________
Массив в функции
void enter_array(int a[], int size)
{
	srand(time(NULL));
	a[size] = rand() % 10;
	for (int i = 0; i <= size; i++){
		cout << a[size] << endl;
     }
}

void main()
{
	const int size = 5;
	cout << "Выводим массив размером: \n";
	enter_array(size, );
	system("pause");
} 
________________________________________________________
// прототип функции
void change_arr(int arr[], int size);	
void main ()
{
}
void change_arr(int arr[], int size)
{
}
_________________________________________________________
Встраиваемая функция, должна быть не перегружена if, while, switch
inline int sum(int a, int b)
{
	return a + b;
}
void main ()
{
 summa = sum(x, y);
cout << summa << endl; }
}	
_________________________________________________________
// Используем вместо функции препроцессор;	
#define sum (x+y)	
void main()
{
    int summa
    summa = sum(x, y);
}	
__________________________________________________________
Перегрузка функции, функция с одним именем но разными параметрами, сама определяет в процессе компиляции
нужные параметры;
int add_values(int a,int b)
{
    return(a + b); //два значения;
)
int add_values (int a, int b, int c)
(
   return(a + b + c); // три значения;
)
void main(void)
{
	cout << «200 + 801 = » << add_values(200, 801) << endl;
	cout << «100 + 201 + 700 = » << add_values(100, 201, 700) << endl;
}		
или:
int add_values(int a,int b)
{
    return(a + b); //два значения;
)
float add_values (float  a, float  b, float  c)
(
   return(a + b); // три значения;
)
void main(void)
{
	cout << «10 + 1 = » << add_values(10, 1) << endl;
	cout << «9.1 + 6.8 = » << add_values(9.1, 6.8) << endl;
}
___________________________________________________________
Шаблоны функций
template <typename T>	// ПИСАТЬ РАЗДЕЛЬНО!!!!!!!!!!
T summa(T a, T b)
{
	return a + b; 
}	
void main ()
{ 
   cout << summa(2, 3) << endl;
}
____________________________________________________________
// шаблон функции printArray
#include <cstring>
using namespace std;
template <typename T>
void printArray(const T * array, int count)
{
    for (int ix = 0; ix < count; ix++)
        cout << array[ix] << "   ";
    cout << endl;
} // конец шаблона функции printArray
int main()
{
    // размеры массивов
    const int iSize = 10,
              dSize = 7,
              fSize = 10,
              cSize = 5;
    // массивы разных типов данных
    int    iArray[iSize] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    double dArray[dSize] = {1.2345, 2.234, 3.57, 4.67876, 5.346, 6.1545, 7.7682};
    float  fArray[fSize] = {1.34, 2.37, 3.23, 4.8, 5.879, 6.345, 73.434, 8.82, 9.33, 10.4};
    char   cArray[cSize] = {"MARS"};
    cout << "\t\t Шаблон функции вывода массива на экран\n\n";
    // вызов локальной версии функции printArray для типа int через шаблон
    cout << "\nМассив типа int:\n"; printArray(iArray, iSize);
    // вызов локальной версии функции printArray для типа double через шаблон
    cout << "\nМассив типа double:\n"; printArray(dArray, dSize);
    // вызов локальной версии функции printArray для типа float через шаблон
    cout << "\nМассив типа float:\n"; printArray(fArray, fSize);
    // вызов локальной версии функции printArray для типа char через шаблон
    cout << "\nМассив типа char:\n";printArray(cArray, cSize);
    return 0;
}
________________________________________________________________
Указатели: при объявлении лучше использовать int  *ptrx вместо int *x;
----------------------------------------------------------------------------------
    Когда мы оперируем данными, то используем знак *
    Когда мы оперируем адресами, то используем знак &
----------------------------------------------------------------------------------
// Инициализация указателя
int main()
{
    int *a = new int; // Объявление указателя для переменной типа int
    int *b = new int(5); // Инициализация указателя
    *a = 10;
    *b = *a + *b;
    cout << "b is " << *b << endl;
    delete b;
    delete a;

    return 0;
}
_--------------------------------------------------------------------------------
Удаление памяти 
int main()
{
    // Выделение памяти
    int *a = new int;
    int *b = new int;
    float *c = new float;

    // ... Любые действия программы

    // Освобождение выделенной памяти
    delete c;
    delete b;
    delete a;

    return 0;
}
Выделение памяти массива 
int arr = new int [SIZE];
Удаление:
delete [] arr;
--------------------------------------------------------------------------------------------
Выделение памяти в двумерном динамическом массиве
// динамическое создание двумерного массива вещественных чисел на десять элементов
    float **ptrarray = new float* [2]; // две строки в массиве
    for (int count = 0; count < 2; count++)
        ptrarray[count] = new float [5]; // и пять столбцов
    // заполнение массива
    for (int count_row = 0; count_row < 2; count_row++)
        for (int count_column = 0; count_column < 5; count_column++)
            ptrarray[count_row][count_column] = (rand() % 10 + 1) / float((rand() % 10 + 1)); //заполнение массива случайными числами с масштабированием от 1 до 10
    // вывод массива
    for (int count_row = 0; count_row < 2; count_row++)
    {
        for (int count_column = 0; count_column < 5; count_column++)
            cout << setw(4) <<setprecision(2) << ptrarray[count_row][count_column] << "   ";
        cout << endl;
    }
    // удаление двумерного динамического массива
    for (int count = 0; count < 2; count++)
        delete []ptrarray[count];
    system("pause");
*****************************************************************************************
Перечисления
enum  weddingAnn
 {
	chintz = 1, 
	paper,
	leather,
	linen, 
	wooden
} year;	//определяем перечисление и объявляем переменную
 
int main()
{
    setlocale(LC_ALL, "rus");
 
    cout << "Олег с Ольгой отмечают\t" << chintz << "-ю годовщину со дня свадьбы!!!";
    cout << "\n";
    cout << "Андрей с Анной отмечают\t" << paper << "-ю годовщину со дня свадьбы!!!";
    cout << "\n";
    cout << "Марк с Ириной отмечают\t" << leather << "-ю годовщину со дня свадьбы!!!";
    cout << "\n";
    cout << "Игорь с Юлией отмечают\t" << linen << "-ю годовщину со дня свадьбы!!!";
    cout << "\n";
    cout << "Олег с Аллой отмечают\t" << wooden << "-ю годовщину со дня свадьбы!!!";
    cout << "\n\n";
 
return 0;
>>>>>>> origin/master
}																